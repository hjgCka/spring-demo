<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--注册多种后置处理器，支持@Autowired等注解-->
    <context:annotation-config/>

    <!--自动实例化这个包下面的带上了@Repository等注解的类。-->
    <context:component-scan base-package="com.hjg.spring.transaction.service.impl"/>

    <!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:com/foo/jdbc.properties"/>
    </bean>-->
    <!--
       这是更推荐的方式，但其实只是实例化了org.springframework.beans.factory.config.PropertyPlaceholderConfigurer对象。
       这个对象是BeanFactoryPostProcessor，作用于bean的配置元数据，用来替换xml文件中的<bean>元素中的占位符。
    -->
    <context:property-placeholder location="classpath:/datasource/jdbc.properties"/>

    <!--配置数据源对象-->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <property name="jdbcUrl" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置Mybatis对象，它是一个FactoryBean，id属性表示的bean是它的getObject返回的对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>

        <!--这2个属性实际上Resource对象，这里使用了默认的转换器-->
        <property name="configLocation" value="classpath:com/hjg/spring/transaction/mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:com/hjg/spring/transaction/mybatis/mapper/**/*Mapper.xml"/>
    </bean>

    <!--这个配置对象用于扫描Mapper接口，不用每个接口都加上@Mapper注解-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hjg.spring.transaction.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--*********开始配置事务***********-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--事务语义-->
        <tx:attributes>
            <!--以get开头的方法是只读-->
            <tx:method name="get*" read-only="true"/>
            <!--其它方法使用默认事务设置-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--
      为Service层产生的所有Bean，创建环绕的事务代理。创建代理时，如果实现了接口就使用JDK动态代理，没有就使用类代理。
      不论切点表达式是否定位到service层或service.impl层。
      这个代理被配置了事务增强，在代理上调用某些方法时，一个事务会开始、挂起、标记为只读等等，
      这些基于方法上的事务配置。
    -->
    <aop:config>
        <!--Service层接口的返回任何值、任何方法、任何方法参数都会被增强-->
        <!--切点表达式定位于接口或实现类时，使用的都是JDK的动态代理。从日志可知。
        创建的代理，使用JDK动态代理创建。-->
        <aop:pointcut id="serviceMethods" expression="execution(* com.hjg.spring.transaction.service.impl.*ServiceImpl*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>

</beans>